$(document).ready(function() {

    var DMURL = $("#dmpublishurl").val();
    var disableDM = $("#disable-dm").val();
    if(disableDM == "true") {
        return;
    }
    $.each($('[data-rte="true"] div[data-enableDM="true"] img:not([src^="'+DMURL+'"])'), function(i,v) {
        try{

            if($(v).attr("src").indexOf("/content") > -1 && $(v).data("enableDM") == "true"){
                var imageUrl = $(v).attr("src");
                checkImageWithModifications(imageUrl).then(function(result) {
                    if(result!=imageUrl){
                        $(v).attr("src",result);
                        // console.log(imageUrl,result);
                    }
                });

            }
        }catch (e) {
            //console.log(e.message);
        }

    });

    function checkImageWithModifications(imageUrl) {
        // Extract the image name without the extension
        var imageName = imageUrl.substring(imageUrl.lastIndexOf("/") + 1, imageUrl.lastIndexOf("."));
        // Append the extracted name to the base URL
        //var modifiedUrl = "http://s7ap1.scene7.com/is/image/isbprod/" + imageName;
        var modifiedUrl = $("#dmpublishurl").val() + imageName;


        // Check if the image URL returns a 200 response
        function checkImageUrl(url) {
            return new Promise(function(resolve, reject) {
                var img = new Image();
                img.onload = function() {
                    resolve(true);
                };
                img.onerror = function() {
                    resolve(false);
                };
                img.src = url;
            });
        }

        // Function to append "-1", "-2", "-3" to the extracted image name
        async function appendTextAndCheck(url, text) {
            var modifiedUrl = url + text;
            return checkImageUrl(modifiedUrl);
        }

        // Check the image URL with different modifications
        async function checkModifications(url) {
            for (var i = 0; i < 4; i++) {
                var text = (i > 0) ? "-" + i : "";
                var isResponse200 = await appendTextAndCheck(url, text);
                if (isResponse200) {
                    return url + text;
                }
            }
            return null; // Return null if no 200 response is found
        }

        // Call the function to check the image URL
        return checkModifications(modifiedUrl).then(function(result) {
            return result || imageUrl; // Return imageUrl if result is null
        });
    }

    var lt14 = false;
    var lt16 = false;

    try {
        var isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
        if (isIOS) {
            // Get the iOS version number
            var versionMatch = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);
            var version = parseInt(versionMatch[1], 10);

            // Check if the iOS version is less than 16
            if (version < 16) {
                console.debug("iOS version is less than 14");
                lt14 = true;
            } else if (version < 16) {
                console.debug("iOS version is less than 16");
                lt16 = true;
            } else {
                console.log("iOS version is 16 or greater");
            }
        } else {
            // Get the macOS version number
            var versionMatch = (navigator.appVersion).match(/Mac OS X (\d+)[_.](\d+)/);
            var majorVersion = parseInt(versionMatch[1], 10);
            var minorVersion = parseInt(versionMatch[2], 10);

            // Check if the macOS version is less than 16
            if (majorVersion < 14) {
                console.debug("macOS version is less than 14");
                lt14 = true;
            }
            else if (majorVersion < 16) {
                console.debug("macOS version is less than 16");
                lt16 = true;
            }

        }
    } catch (e) {
        console.debug(e.message);
    }

    if (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.indexOf('Trident') !== -1 || navigator.userAgent.indexOf('Edg') !== -1 || lt16 || lt14) {
        $.each($('[data-rte="true"] source'), function (i, v) {
            try {
                if (lt14) {
                    var uri = $(v).attr('srcset');
                    if(uri.endsWith('?fmt=avif')) {
                        uri = uri.replace("?fmt=avif", "");
                    } else if(uri.includes('?fmt=avif&')) {
                        uri = uri.replace("fmt=avif&", "");
                    } else if(uri.endsWith('&fmt=avif')) {
                        uri = uri.replace("&fmt=avif", "");
                    } else if(uri.includes('&fmt=avif&')) {
                        uri = uri.replace("fmt=avif&", "");
                    }
                    $(v).attr('srcset', uri);
                } else {
                    $(v).attr('srcset', $(v).attr('srcset').replace("avif", "webp"));
                }
            } catch (e) {
                console.debug(e.message);
            }
        })

        $.each($('[data-rte="true"] img'), function (i, v) {
            try {
                if (lt14) {
                    var uri = $(v).attr('src');
                    if(uri.endsWith('?fmt=avif')) {
                        uri = uri.replace("?fmt=avif", "");
                    } else if(uri.includes('?fmt=avif&')) {
                        uri = uri.replace("fmt=avif&", "");
                    } else if(uri.endsWith('&fmt=avif')) {
                        uri = uri.replace("&fmt=avif", "");
                    } else if(uri.includes('&fmt=avif&')) {
                        uri = uri.replace("fmt=avif&", "");
                    }
                    $(v).attr('src', uri);
                } else {
                    $(v).attr('src', $(v).attr('src').replace("avif", "webp"));
                }
            } catch (e) {
                console.debug(e.message);
            }
        })
    }


});